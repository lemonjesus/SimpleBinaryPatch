#include <stdint.h>

enum bp_ret_code {
	SUCCESS = 0,
	OUT_OF_DIFF,
	OUT_OF_HEAP,
	POINTER_ERR
};

struct binary_patch {
	uint32_t bin_len;     // Length of the raw binary data, uint32_t for portability
	uint8_t *diff_start;  // Array of pointers for the starts of the differing sections
	uint8_t *diff_stop;   // Array of pointers for the ends of the differing sections
	uint32_t diff_len;    // Lenth of the 2 above arrays, they should be the same
	uint8_t *heap;        // Bytes of space to put the differing sections in
	uint32_t heap_len;    // How many bytes the heap is
};

/**
 * Generates a patch of 2 equal size chunks of binary data.  Will update patch.diff_len and
 * patch.heap_len to the actual values once complete.  These values must be set to the allocated
 * length before calling.
 *
 * @param *old   - Original binary data
 * @param *new   - New binary data
 * @param *patch - Place for the patch, diff_start and diff_stop must be the same size
 * @return       - 0 if successful, otherwise a non-zero return code
 */
enum bp_ret_code gen_patch(uint8_t *old, uint8_t *new, struct binary_patch *patch);

/**
 * Applies the patch generated by gen_patch().
 *
 * @param *dest  - Place to be patching
 * @param *patch - Place for the patch, as genreated by gen_patch()
 * @return       - 0 if successful, otherwise a non-zero return code
 */
enum bp_ret_code apply_patch(uint8_t *dest, struct binary_patch *patch);
