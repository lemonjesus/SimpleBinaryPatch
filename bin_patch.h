#include <stdint.h>

enum bp_ret_code {
    SUCCESS = 0,
    OUT_OF_DIFF,
    OUT_OF_HEAP
};

// Change these to tweak sizing for space savings, note that
// sizeof(len_t) needs to be larger than sizeof(index_t)
typedef uint32_t len_t;
typedef struct { uint8_t n[3]; } index_t;

struct binary_patch {
    index_t  diff_len;    // Lenth of the 2 below arrays, they shall be the same
    index_t *diff_start;  // Array of indexes for the starts of the differing sections
    index_t *diff_delta;  // Array of lengths of the differing sections
    index_t  heap_len;    // How many bytes the heap is
    uint8_t *heap;        // Bytes of space to put the differing data in
};

len_t index_to_len(index_t n);
index_t len_to_index(len_t n);

/**
 * Applies the patch generated by gen_patch().
 *
 * NOTE: patch.heap_len is not used by this function
 *
 * @param *dest  - Place to be patching
 * @param *patch - Place for the patch, as genreated by gen_patch()
 */
void apply_patch(uint8_t *dest, struct binary_patch *patch);

/**
 * Generates a patch of 2 equal size chunks of binary data.  Will update patch.diff_len and
 * patch.heap_len to the actual values once complete.  These values must be set to the allocated
 * length before calling.
 *
 * @param *old     - Original binary data
 * @param *new     - New binary data
 * @param *bin_len - Length of the raw binary data
 * @param *patch   - Place for the patch, diff_start and diff_stop must be the same size
 * @return         - 0 if successful, otherwise a non-zero return code
 */
enum bp_ret_code gen_patch(uint8_t *old, uint8_t *new, len_t bin_len, struct binary_patch *patch);
